OPE2022Tema 5Planificación estratégica. Buenas prácticas ágiles: Lean, Kanban, SCRUM. Escalado ágil: SAFe, LeSS, SoS.Autor : Amparo Collado
INDICE1.	PLANIFICACIÓN ESTRATÉGICA.	31.1	PROCESO DE PLANIFICACIÓN ESTRATÉGICA.	41.2	FACTORES CRÍTICOS DE ÉXITO.	41.3	DAFO	51.4	Participantes en la elaboracion del Plan Estrategico.	61.3	Plan de Sistemas de Información	62.	BUENAS PRÁCTICAS ÁGILES: LEAN, KANBAN, SCRUM.	82.1	METODOLOGÍA LEAN	102.2	KANBAN	112.3	SCRUM	133.	ESCALADO ÁGIL: SAFE, LESS, SOS.	163.1	SCALED AGILE FRAMEWORK (SAFE)	173.2	LARGE SCALE SCRUM (LESS)	183.3	SCRUM OF SCRUMS (SOS)	224.	EJERCICIOS / CUESTIONARIO	235.	BIBLIOGRAFÍA	27
1. Planificación estratégica.Los Sistemas de Información deben desarrollarse teniendo en cuenta los objetivos estratégicos de la organización.Alfred Chandler definió la estrategia como la determinación de las metas y objetivos básicos a largo plazo en una organización, junto con la adopción de líneas de acción y la distribución de los recursos necesarios para lograr estos propósitos. La planificación considera además de lo que la organización planea hacer, las circunstancias no previstas. Según esto, Henry Mintzberg definió la estrategia como el patrón de las respuestas de la organización a su ambiente a través del tiempo. Según este enfoque toda organización tiene una estrategia, aunque no haya sido formulada.R. ACKOFF en 1973, definió la planificación como “concebir un futuro deseado y los medios para alcanzarlo”. Para llevar a cabo una planificación se definirán en primer lugar los objetivos que se desean alcanzar y las posibles líneas de acción que lo permitirían. Estas líneas de acción se desarrollarán de acuerdo a las políticas fijadas en la organización y se plasmarán en proyectos concretos. Tipos de planificación:? PLANIFICACIÓN ESTRATÉGICA: Realizada por los directivos, en general para los objetivos y políticas a largo plazo. Para llevarla a cabo es necesario conocer los propósitos socioeconómicos, los valores de los altos directivos, las oportunidades externas e internas y los puntos fuertes y débiles de la organización (FCE y DAFO). ü PLANIFICACIÓN TÁCTICA: Describe las medidas para obtener cada uno de los objetivos del plan estratégico. ü PLANIFICACIÓN OPERATIVA: Despliegue detallado de los recursos para cumplir con los objetivos del plan estratégico a corto plazo.La planificación estratégica permite: ü Establecer la dirección a seguir por la empresa y sus unidades de negocio.   ü Examinar, analizar y discutir sobre las diferentes alternativas posibles. ü Facilitar la posterior toma de decisiones.   ü Controlar los riesgos.El Plan Estratégico de Sistemas de Información y Comunicaciones que se formule debe reunir las siguientes características:  ü Debe ser viable y realizarse en un lenguaje conciso.  ü Debe contener las aspiraciones de la Dirección (metas y objetivos) y estar dentro del sentido del negocio de las funciones de la organización.   ü Debe considerar las Tecnologías de la Información como estrategia y no como táctica, es decir, como un medio para conseguir las metas, objetivos y planes a largo plazo, y no para resolver aspectos funcionales.El Plan Estratégico deberá contener:ü Soluciones técnicas (los requerimientos de los sistemas y sus prioridades). ü Implicaciones del plan: costes, calendario, recursos, actividades, …   ü Plan de desarrollo de la estrategia.1.1 Proceso de planificación estratégica.La planificación estratégica estará condicionada por la visión de la empresa y por su misión (programas e iniciativas que impulsará la organización para aproximarse a la visión o situación a la que se quiere llegar en un futuro). En base a ellas, se establecerán los objetivos que podrán cumplirse a través de una serie de líneas de acción, detalladas en acciones o proyectos concretos. El proceso se compone principalmente de tres fases, que suponen una serie de actividades y que, en ocasiones, se apoyan en una serie de técnicas para llevarlas a cabo.FASEACTIVIDADESTECNICASFORMULACIÓN DE LAESTRATEGIA- Definición de la misión.- Definición de metas y objetivos.- Análisis de la situación actual: objetivos/estrategias actuales y análisis del ambiente (políticas generales,procesos, flujos de datos de la organización) y elcontexto (mercado, competidores, …)- Toma de decisiones estratégicas: identificar/evaluar y seleccionar alternativas estratégicas.DAFOFCE(ver másadelante)IMPLEMENTACIÓN DELA ESTRATEGIA- Diseño de la estructura organizacional.- Diseño del sistema de control organizacional.- Adecuación de estrategias, estructura y controles.- Manejo del conflicto, las políticas y el cambio.EVALUACIÓN DE LAESTRATEGIA- Revisión de los factores internos/externos base de lasestrategias presentes.- Medición del desempeño.- Aplicación de acciones correctivas.Cuadro deMandoIntegral1.2 Factores Críticos de Éxito.Según la metodología Métrica v3, los objetivos son los “fines” hacia los cuales se dirige el esfuerzo y el trabajo de la organización, mientras que los Factores Críticos de Éxito (FCE) son los "medios" o condiciones que se deben cumplir para alcanzar los objetivos. Para cada objetivo se debe definir al menos un factor de éxito. Es necesario diferenciar entre Factores de Éxito (debe ocurrir o no para conseguir un objetivo) y Factores Críticos de Éxito (su cumplimiento es absolutamente necesario para alcanzarlo). Los FCE suponen una práctica cuyo objetivo es ayudar a la planificación de las actividades y recursos de la organización, facilitando la asignación de prioridades y con las siguientes características:  ü deben ser temporales, subjetivos, vitales y específicos de la organización.       ü están influenciados por el contexto.Todo proceso que pueda afectar a los FCE se considerará estratégico. Los pasos para definir los FCE son los siguientes:  ? Elaborar y depurar la lista con los objetivos de la organización (deben ser un fin y no un medio).   ? Identificar los factores de éxito y eliminar los no críticos.     ? Agrupar los factores de éxito de acuerdo con los objetivos (ayuda a evitar duplicados).       ü Identificar los componentes de estos factores de éxito (descomponerlos permite separar los que son verdaderamente críticos de los que exigen menos esfuerzo o recursos).  ü Seleccionar los factores críticos de éxito (un número razonable).       ? Finalizar el estudio, con la lista final de FCE. Para aquellos controlables por la organización es necesario asignar recursos y herramientas, así como procedimiento de seguimiento y realimentación sobre el grado de cumplimiento. Para los no controlables, se debe establecer un mecanismo periódico de información.1.3 DAFO.Es el diagrama que permite analizar las Debilidades, Amenazas, Fortalezas y Oportunidades con las que cuenta una organización, tal y como puede verse en la imagen siguiente:Las debilidades y fortalezas son los puntos débiles o fuertes de la propia organización (características internas) que pueden suponer ventajas o desventajas competitivas.Las amenazas y oportunidades son características del contexto (externo). Las amenazas suponen todo aquello que puede impedir una correcta consecución de la estrategia y las oportunidades aquello que pueda suponer una ventaja o representar una posibilidad1.4 Participantes en la elaboración del plan estratégico.    ü Comité de dirección de tecnologías y sistemas de la información: traslada la política general de la organización al Plan Estratégico de Sistemas de Información y Comunicaciones. Además, toma las decisiones finales y aprueba los nombramientos del resto de participantes.      ? Equipo de proyecto: organiza el trabajo y realiza el estudio en sí (función ejecutiva). Compuesto por el director de proyecto y personal especializado, así como los consultores de apoyo.  ü Grupo de usuarios: define funcionalmente lo que se necesita y ejerce una función consultiva.   ü Grupo de especialistas: apoyo de especialistas externos al equipo de proyecto (experto en comunicaciones, especialistas en financiero, …).1.5 Plan de Sistemas de información.Para implementar las estrategias de los sistemas de información debemos realizar lo que se denomina un Plan de sistemas de información.Hay que partir de la situación actual de los procesos internos, identificar las transformaciones oportunas, y desarrollar los cambios necesarios en los Sistemas de Información que los soportan para alcanzar las metas y objetivos de negocio fijados por la organización.La planificación estratégica de los sistemas de información tiene como propósito la revisión del estado actual de la organización, la identificación de la situación estratégica deseada y la planificación de los proyectos y cambios en la organización necesarios para alcanzar dicho estado deseado, habitualmente en un periodo de 3 o 5 años. Esta actividad debe involucrar a todos los actores relevantes de la organización para conseguir la alineación de los objetivos de los sistemas de información con la estrategia organizativa.Un plan estratégico de sistemas de información permite mejorar ciertas cuestiones clave para la organización como son:* Mejora de la productividad a nivel global.* Ahorro de costes.* ?Automatización de tareas.* Disponer de dato único.* ?Mejora en la comunicación interna.* Mejora en la relación con el cliente.* ?Unificación en herramientas de ofimática, email, ficheros, intranet, …* ?Mejora en la seguridad de la información y ciberseguridad.* Uso o adopción de las nuevas tecnologías Cloud, SaaS, etc.* Disponibilidad de los servicios de cara a todos los interesados anteriormente comentadosEn ocasiones y en la actualidad el desarrollo de un plan estratégico de los sistemas de información está muy relacionado con el concepto denominado digitalización de la empresa, es decir, la adopción de las nuevas tecnologías en masa por la organización para ser más productivos, rentables, etc.Para ello el responsable del Plan estratégico TI debe planificar las siguientes tres grandes fases:* AS-IS. Entender la situación actual, sobre todo en el core del negocio, sus necesidades en materia de procesos e informáticas no cubiertas actualmente. Para ello se establecen reuniones con los principales usuarios (key users) y se analiza cada gap (diferencia o problema) con lo que realmente requiere la empresa. De igual forma se establece necesidades a corto y medio plazo que la empresa u organización tiene para poder acompañar su situación estratégica.* ?TO-BE. Una vez entendido el AS-IS de la empresa, con toda la información recabada y bajo los parámetros de Cloud, movilidad, ahorro de costes, disponibilidad, automatización, multidispositivo, interconexión, automatización… y algunos otros estudiamos cual debería ser el mapa de aplicaciones idóneo que en un futuro a corto y medio plazo acompañe su estrategia. Se plantean escenarios y en debate y consenso con el cliente, con su cultura, se llega al idóneo.* ?Plan de acción. Una vez se tienen claro cómo vamos a resolver el TO-BE planteamos proyectos y establecemos fechas, costes y responsables en un diagrama de Gantt.Diagrama de un plan estratégico de los sistemas de información en el contexto actual de digitalización de las empresas.Un plan estratégico TI es la mejor forma que tiene una empresa para poder acompañar, por un lado, la estrategia de la empresa y por otro para alcanzar lo que denominamos la empresa digital, es decir, la digitalización y automatización de la mayoría de sus procesos.2. Buenas prácticas ágiles: Lean, Kanban, SCRUMLas metodologías tradicionales (las predictivas, e incluso las evolutivas) de desarrollo de software se basan en los siguientes principios:* Definición exhaustiva de requerimientos.* Análisis y diseño lo más completos posibles.* Diseño genérico que intente anticiparse a futuras necesidades.* Reducción del número de cambios en la fase de desarrollo en la medida de lo posible.* Detección de fallos en las fases iniciales.De ellos se puede entrever que uno de los mayores problemas es la incorporación de un cambio en mitad del desarrollo, especialmente cuanto más avanzado se encuentra el proyecto. Pero en desarrollo de software es extremadamente complejo poder precisar todos los requerimientos del sistema al inicio del proyecto ya que en cualquier etapa del ciclo de vida puede aparecer una nueva necesidad que requiera un cambio sobre lo planificado.Con objeto de discutir sobre estas problemáticas, en 2001 se reúne un grupo de 17 expertos en desarrollo de software, formando la Agile Alliance. Como resultado de dicha reunión se firma el Manifesto for Agile Software Development que se sustenta sobre 4 valores y 12 Principios.Los cuatro valores sobre los que se sustentan los principios de agilidad son los siguientes:* Se valora a los individuos y sus interacciones, por encima de procesos y herramientas.* Se valora un software que funciona, por encima de la documentación exhaustiva.* Se valora la colaboración con el cliente, por encima de la negociación contractual.* Se valora la respuesta al cambio, frente al seguimiento de un plan.No quiere decir que la agilidad no valore los elementos de la derecha, sino que valora más los de la izquierda. Sobre estos cuatro valores, se desarrollan los siguientes doce principios:Los 12 principios que rigen el manifiesto ágil son los siguientes:1. La máxima prioridad es satisfacer al cliente mediante la entrega temprana y continua de software de valor.2. Los cambios son bienvenidos en cualquier etapa del desarrollo. Los cambios se viven como una oportunidad de aportar valor al cliente.3. Entrega frecuente de software que funciona, con periodos de entre un par de semanas y un par de meses, dando prioridad a periodos cortos.4. Los desarrolladores junto con la gente de negocios deben trabajar juntos a diario en el proyecto.5. El proyecto se construye por individuos motivados. Para ello se les da el entorno, la confianza y el soporte necesario para que realicen el trabajo.6. El método más efectivo y eficaz de intercambiar información con y dentro del equipo de desarrollo es en una conversación cara a cara.7. La principal medida de progreso es el software que funciona.8. Los procesos ágiles promueven el desarrollo sostenible, lo que implica mantener un ritmo constante de desarrollo.9. La agilidad se ve mejorada por la continua atención a la excelencia técnica y el buen diseño.10. La simplicidad, entendida como la capacidad de maximizar el trabajo no hecho, es esencial.11. Las mejores arquitecturas, requisitos y diseños emergen de los equipos autoorganizados.12. En intervalos regulares, el equipo analiza cómo ser más efectivo y ajusta su comportamiento para conseguirlo2.1 Metodología LeanEl origen se encuentra en el sistema de producción de Toyota. El matrimonio Poppendieck lo “trasladan” al software. Lean es una palabra inglesa que significa magra, sin grasa, es decir, que elimina todo aquello que no aporta valor al cliente. Se trata de un proceso sistemático para eliminar desechos o desperdicios en los procesos (elementos que no aportan valor), reduciendo los costes y aumentando la calidad del producto o del servicio para entregar productos más rápido y con mejor calidad. La metodología Lean aplicada al SW no define un proceso concreto, lo importante es demostrar que los procesos están alineados con los principios.Principios de Lean:* Eliminar desperdicios. Se define desperdicio como cualquier cosa que no añade valor a un producto, desde el punto de vista del cliente. Es el valor más importante representativo de Lean. Ejemplo: es un desperdicio hacer más cosas que lo necesario o desarrollar características más que las inmediatamente necesarias.* Amplificar el aprendizaje. Como norma general no se obtiene una versión perfecta de nada a la primera, sino que se llevan a cabo varias versiones como parte del proceso de aprendizaje.* Decidir lo más tarde posible. Se debe de retrasar decisiones basadas en especulaciones e hipótesis, para tomar decisiones que puedan ser basadas en hechos.* Entregar tan rápido como sea posible. Obtener feedback del cliente cuanto antes. Sin velocidad en la entrega no obtendremos feedback pronto y será más difícil retrasar decisiones.* Empoderar al equipo, involucrando a los desarrolladores en la toma de decisiones en su área de decisión.* Embeber la calidad. Adquirir prácticas que aseguren la calidad lo antes posible durante el proceso de construcción.* Ver el todo. Uno de los grandes problemas de hoy en día de los proyectos software es que los expertos en cualquier área tienen tendencia a maximizar la importancia de aquella parte en la que son expertos. De tal manera que hay que evitar esto, y ver el sistema como un todo.Prácticas y técnicas asociadas.Existen una serie de técnicas y prácticas que se adoptan habitualmente dentro del ámbito lean para el desarrollo del SW:? Value Stream Mapping (VSM): Herramienta Lean para analizar el flujo de recursos y de información que se requiere desde que se solicita un producto hasta que se entrega al cliente. Mediante esta herramienta se representa la secuencia de actividades que se llevan a cabo, el promedio de duración y los tiempos de espera. Se usa para representar la posición actual y localizar puntos de mejora.? 5S: Herramienta que ayuda a organizar el lugar de trabajo (ámbito lógico en ingeniería SW) y a conseguir procesos más eficientes. Consta de los siguientes elementos: o Sort (Clasificar).   o Set in Order (Ordenar): Elementos (carpetas, ficheros) ubicados siguiendo lógica que facilite su     localización.    o Shine (Limpiar): Eliminar del código todo aquello que lo desluce.      o Standardize (Estandarizar): Establecer procedimientos formales para todos los pasos. o Sustain (Sostener): Mantener el proceso a través de formación y comunicación.? Evento KAIZEN: (=mejora continua) Evento en que se realizan cambios a un proceso para que este mejore. Se reúne en un equipo a los representantes de las áreas involucradas, entre todos se decide qué mejora continua afrontar y durante un espacio de tiempo no mayor de una semana trabajan en realizar las modificaciones necesarias en el proceso para solucionarlo.? Método Kanban: Práctica que de forma simple y visual controla el flujo de estados de las tareas de un proceso. Permite limitar la cantidad de trabajo sin terminar en cada una de las etapas del flujo de trabajo.? Poka-yoke (a prueba de errores): Técnica de calidad que se aplica con el fin de evitar errores en la operación de un sistema. Se busca eliminar o evitar equivocaciones ya sean de ámbito humano o automatizado. Ejemplo: sistema de gestión que impide que un usuario modifique las tareas cogidas por otro miembro del equipo.? Jidoka: Concepto por el que los procesos automáticos tienen su propio autocontrol de calidad. Si existe una anomalía en el proceso este se detendrá impidiendo que afecten al resto de los procesos.2.2 KanbanKanban es un sistema o un conjunto de técnicas de representación visual de la evolución de un proyecto. El primero que acuñó dicho nombre fue el ingeniero de Toyota Taiichi Ohno (Ohno, 1988) para referirse a los paneles con los que controlaban la producción en cadena de sus fábricas.Kanban, configurado a modo de tableros visuales donde se identifican todas las tareas en proceso y se colocan por columnas según el estado en el que se encuentran, permite de manera rápida identificar los dos problemas más importantes en la producción, y que en terminología Lean generan desperdicios:* Los tiempos muertos.* Los cuellos de botella.Su representación visual en forma de tableros que se colocan a la vista en el lugar de trabajo responde a otro par de principios ágiles:* La comunicación directa.* La simplicidad en la documentación.Aunque Kanban se puede utilizar para procesos iterativos, con incremento en periodos fijos, como pueda ser Scrum, son especialmente indicados para procesos de entrega continua, como Lean. La flexibilidad que proporcionan a la hora de configurar los estados de las tareas y su visualización se enmarca perfectamente en la filosofía ágil.Se puede utilizar como tablero Kanban una pizarra de corcho o magnética, o bien una aplicación software. El tablero se divide verticalmente en tantas secciones como se desee para gestionar el flujo de las tareas. Una división común puede ser la siguiente:* Pendiente, donde se pondrían las tareas que están pendientes de ser comenzadas.* En curso, donde se pondrían las tareas sobre las que se está trabajando.* Hechas, donde se pondrían las tareas finalizadas.Aunque no existe una prescripción fija y cada equipo puede decidir utilizar la división que quiera, incorporando columnas extra como atascadas, pendientes de prueba, descartadas, etc. Kanban, sin embargo, sí que permite considerar una restricción en cuanto al número de tareas que puede haber en un momento dado en cada columna, por ejemplo, limitando a no más de una tarea en curso por persona, con el objetivo, como se marcaba en Lean, de centrarse en la pieza completa y no en sus partes, y evitando así la dispersión en exceso del equipo.En cada una de estas columnas, con post its si es un tablero físico, o con el equivalente si es un tablero virtual, se colocan las diferentes tareas en las que se descomponga el proyecto (o únicamente las historias de usuario del sprint, si se está usando con Scrum).Con este modelo de gestión y visualización se consiguen dos propósitos:* Gestionar el flujo de trabajo del proyecto* Difundir la información del estado del proyecto a todo el equipo.Para que el segundo propósito se cumpla, el tablero debe estar a la vista de todo el equipo en caso de ser físico, y accesible a todos los miembros en caso de ser virtual.A continuación, se muestra un ejemplo de tablero Kanban de la herramienta open source Kanboard (https://kanboard.net/):2.3 SCRUMScrum es una metodología ágil propuesta en 1986 por Ikujiro Nonaka e Hirotaka Takeuchi en su artículo The New New Product Development Game (Takeuchi y Nonaka, 1986), donde analizaban el desarrollo de productos tecnológicos por empresas como Fuji-Xerox, HP, Canon, Honda, Nec, Epson, Brother o 3M y lo comparan con la forma de avanzar en un equipo de rugby (scrum). En 1995 Ken Schwaber y Jeff Sutherland publican un marco metodológico para el desarrollo de software (Schwaber, 1995) basado en Scrum y con el que el primero desarrollaría el lenguaje de programación Delphi. Scrum técnico se basa en un proceso iterativo de liberación organizado en torno a los roles, artefactos y eventos.* Roles: Existen tres roles en los equipos scrum:o Scrum Master, que es el encargado de que toda la metodología Scrum se aplique correctamente. Comúnmente se confunde con el jefe del proyecto, pero en realidad no tiene ninguna función burocrática, ni de gestión, ni de control. En Scrum no existe el concepto de jefe de proyecto, ni de gestor de proyecto, ni similar. Su cometido es el de facilitador. Debe tener un amplio conocimiento de la metodología Scrum.o Product owner o dueño del producto, que será el encargado de tomar las decisiones del cliente. Su principal objetivo es conseguir valor para el cliente. Debe ser una persona que tenga un amplio conocimiento del negocio, aunque no tiene por qué tenerlo ni de las prácticas Scrum ni del propio desarrollo.o Equipo Scrum, donde se integran los profesionales que componen el equipo de desarrollo. Se recomienda que un equipo Scrum tenga entre 3 y 8 personas, y que sea multidisciplinar. La responsabilidad del trabajo es de todos.* Artefactos: Sirven para el desarrollo y la gestión del proyecto bajo la metodología Scrum. Son tres los artefactos presentes:o Product backlog o pila del producto, donde se identifican los requisitos del cliente en lo que se llaman historias de usuario. La pila de producto es responsabilidad del product owner, es el único que puede modificarla, y lo hará cada vez que considere que una determinada historia puede aportar valor al cliente. Su principal cometido será pues priorizarla de modo que se entregue el mayor valor posible al cliente en iteraciones lo más cortas posibles. El product backlog contendrá arriba las tareas más prioritarias. El detalle irá en proporción a su prioridad y de lo cerca que estén de la cima de la pila. Tareas en la cima deberán estar muy detalladas para poder ser realizadas, mientras que tareas más abajo en la pila pueden no estar tan detalladas, o ser simples ideas, relegando la tarea de detallarlas para más tarde. Se prima lo inmediato.o Sprint backlog o pila del sprint, donde se identifican, del product backlog, aquellas tareas que van a ser realizadas en el próximo sprint. Es responsabilidad del equipo, y sólo él tiene la autoridad, decidir cuáles son las historias de usuario, de las priorizadas en el product backlog, que se llevarán a cabo en el próximo sprint, en función de la estimación realizada para ellas y la velocidad de producción del equipo. Una vez se empieza un sprint, no se puede variar ni interrumpir al equipo hasta que finalice.o Incremento: Es la parte del producto que se consigue en un sprint y que se corresponde con las historias de usuarios que se desarrollaron y terminaron en el mismo. La condición de terminada debe quedar bien definida al principio: es toda aquella tarea terminada y probada y que es potencialmente entregable al cliente por aportar un valor.* Eventos: Son los sucesos que guían el proceso de desarrollo y determinan las fases en las que se encuentra el mismo. Son los siguientes:o Sprint: Es el tiempo que se dedica a cada iteración en el desarrollo. Este tiempo es prefijado y es el que marca los avances en el producto. Se suele fijar entre 1 y 30 días, aunque es bastante común que se fije entre 1 y 2 semanas.o Reunión de planificación del sprint: Reunión previa al inicio del sprint y donde se determina el objetivo del sprint y las tareas necesarias para conseguirlo. El equipo discute y estima las historias de usuario priorizadas en el product backlog y confecciona el sprint backlog. No debería durar más de un día en un sprint largo de un mes, y en ella deben estar presentes todos los miembros del proyecto: Product owner, Scrum master y equipo.o Reunión diaria: Es una reunión de no más de 15 minutos donde los miembros del equipo, a ser posible de pie, responden a las siguientes cuestiones. Puede asistir cualquier miembro relacionado con el proyecto, aunque es una reunión del equipo y sólo sus miembros pueden intervenir:      ??Qué trabajo realicé ayer.      ??Qué trabajo espero realizar hoy.      ??Qué problemas tengo o puedo tener que puedan llegar a atascarme. Será responsabilidad del Scrum master facilitar este punto.o Reunión de revisión del sprint: Al final de cada sprint, se efectúa un análisis y evaluación del incremento generado en el mismo, es decir, hasta qué punto se ha conseguido el objetivo, actualizando el product backlog si es necesario. Es una reunión del equipo con el product owner en el que el primero presenta los resultados terminados del sprint al segundo, que tiene la responsabilidad de velar por el valor entregable a cliente. No debería durar más de cuatro horas en un sprint largo de un mes.o Reunión de retrospectiva: Se realiza al final de cada sprint para analizar cómo se ha desarrollado el mismo y cómo se podría mejorar en próximos sprints. Es una reunión del equipo para analizar su propio funcionamiento, tratando de responder a la cuestión de cómo se ha desarrollado el sprint.TEMARIO OPOSICIONES COIICV | TEM3. Escalado ágil: SAFe, LeSS, SoS.En la actualidad son escasas las organizaciones constituidas en torno a un solo proyecto y con un único equipo. Por el contrario, encontramos múltiples productos en desarrollo en los cuales trabajan multitud de personas. Esto plantea la necesidad de coordinar diferentes iniciativas y equipos trabajando en soluciones de gran tamaño. En entornos de trabajo ágiles, este escalado puede interpretarse en dos ejes: vertical y horizontal.* Eje vertical: Cuando el proyecto es de gran tamaño, no es posible ejecutarlo con un único equipo. Scrum no escala por sí mismo. Necesitamos una convergencia de pequeños incrementos hacia una solución unificada denominada escalado vertical.* Eje horizontal: Asimismo, las organizaciones evolucionan a partir de células aisladas de desarrollo ágil hacia estructuras complejas. Las dependencias e impedimentos de unos equipos afectan o son compartidos por otros y necesitan de una aproximación sistémica para resolverlos, denominada difusión o escalado horizontal.Marcos de escalado verticalEl escalado vertical es un mecanismo de coordinación de diferentes unidades de desarrollo trabajando juntas y de manera ágil para desarrollar un único producto de gran tamaño. En esta situación, es necesario entregar incrementos integrados dentro de un entorno en escala. Con seguridad, el aspecto más complicado resulta la gestión de dependencias entre diversos equipos ágiles, que además se encuentran ya operando en entornos complejos. En un intento por resolver estos problemas se han realizado diversas propuestas, de las cuales podemos destacar:Large Scale Scrum (LeSS)LeSS es un framework para el desarrollo de producto creado por Craig Larman y Bas Vodde con una colección de principios, reglas, guías y experimentos que pueden ser usados en un entorno de software a escala. Dentro de las opciones de escalado ágil, es un marco muy flexible con un coste de implantación bajo, y muy acoplado a Scrum. Tal vez, una de las características a destacar de esta aproximación, es la de ofrecer soluciones al clásico problema de un Product Owner trabajando con varios equipos a la vez.Scaled Agile Framework (SAFe)SAFe es un marco de trabajo y una colección de buenas prácticas de desarrollo ágil para grandes empresas creado por Dean Leffingwell. Reúne el conocimiento probado en cuanto a principios Lean y Agile. Permite, a diferencia de los antes mencionados, incorporar frameworks como Scrum y Kanban. Su objetivo es llevar a las grandes empresas las metodologías ágiles, para ello varios equipos agiles trabajan de manera sincronizada y colaborativa en el desarrollo de software mediante la entrega de incrementos, en contrapartida esto lo convierte en una metodología predictiva y poco flexible, y cuyo coste de implantación es elevado.Marcos de escalado horizontalExisten otras soluciones enfocadas al problema del escalado horizontal como SoS Scrum of scrums. En la práctica, la gestión de dependencias continúa siendo un inconveniente fundamental.Scrum of scrumsSoS es una técnica para escalar equipos individuales a nivel corporativo. Las diferentes unidades de negocio gestionan un portafolio de múltiples líneas, que un tienen un espejo en tecnología. Cada producto tiene su propio ciclo Scrum, y la línea celebra un Scrum of scrums. El único evento es el SoS, una reunión de máximo 15 minutos a la que concurren los embajadores (scrum masters) y opcionalmente un representante técnico. El objetivo es resolver los impedimentos y bloqueos que afecten las próximas releases.3.1 Scaled Agile Framework (SAFe)En el momento de redacción de este tema la versión más reciente de SAFe es la 5.0.Ha sido adoptado por grandes empresas como Intel, Hewlett-Packard Enterprise y Cisco.La metodología SAFe es una apuesta por la agilidad en la organización empresarial y el desarrollo de programas informáticos. El enfoque va dirigido hacia la implementación de la agilidad en la empresa, y no sólo a los equipos como es el caso de Scrum. Para implementarlo existen tres niveles: nivel de equipo, de programa y de portafolio. De manera sencilla, en el nivel de equipo se define cómo está articulado cada equipo que participa en el desarrollo de un software o un proyecto empresarial. Es normal utilizar técnicas scrum en este nivel.En el nivel de programa se perfila aún más la organización y los objetivos que se persiguen. Además, se ordena qué trabajo realizará cada equipo, se establecen una cadena de mando y unos resultados, los cuales deben alcanzarse al unísono por todos los equipos. Una vez alcanzados los resultados, en un plazo de 10 semanas se planifican las siguientes actividades y el ciclo vuelve a empezar. Por último, en el nivel portafolio se define lo que más valor aporta a la organización y se potencia, ya que mejoran todo el sistema. En resumen, se trata de ver qué es lo que funciona y lo qué no para aumentar la eficiencia del trabajo y garantizar unos mejores resultados.El agile release train o ART, es un componente fundamental del nivel de programa. Estamos ante un modo de planificar la entrega de un software, o de sus iteraciones, en un tiempo determinado. Todos los equipos que participan en el desarrollo deben conocer el calendario de entregas, el cuál debe ser cumplido. ¿Por qué Train?… si, es lo que estás pensando. Su nombre es una analogía con los horarios de los trenes, los cuales se van, aunque el pasajero no esté. Así, realizar las entregas a tiempo es vital, ya que el tren saldrá a su hora con lo que haya.El Product Owner y Scrum Master son dos figuras importantes en esta metodología. El product owner es aquel individuo dentro de la organización que descubre lo que necesita el cliente y busca soluciones a cada necesidad. Para esto cuenta con una lista priorizada de funcionalidades del producto. En cuanto al scrum master, este rol se encarga de que los valores y pilares del scrum se apliquen en cada equipo. En resumen, se trata de un coordinador que busca sacar adelante cada proyecto en el tiempo establecido y se encarga de solucionar los problemas cotidianos.Niveles de la metodología SAFe.3.2 Large Scale Scrum (LeSS)LeSS se puede utilizar para escalar Scrum en grandes compañías donde existen varios equipos Scrum. El punto clave de este “framework” es que escala. Ya sabemos que Scrum, funciona muy bien en empresas pequeñas con productos no muy grandes, y que, en las grandes organizaciones, tradicionalmente, se han implementado las metodologías en cascada.Principios de LeSS:* “More with LeSS”, que no viene a decir más que, podemos conseguir más y mejores resultados con menos esfuerzo, es decir, un problema complejo requiere una comprensión profunda para que puede resolverse con soluciones simples.* Pensamiento Lean eliminando desperdicios y centrándonos sólo en aquello que proporciona valor.* Pensamiento sistémico, cuyo objetivo es que los miembros entiendan e interioricen todo el proceso de desarrollo ágil entendiéndolo como “un todo” y no como “parte de”.* Control de procesos empíricos, esto se basa en que, en lugar de seguir una fórmula estática e invariable (como una receta de cocina), Scrum se basa en el principio de inspección y adaptación para obtener mejores resultados. Este principio va un poco más allá con LeSS, indicando que debemos controlar estos procesos de inspección y adaptación para apoyar a la transparencia.  * Transparencia. Esto viene a repetir un poco el principio anterior, haciendo hincapié en que la información compartida se basa en elementos tangibles, producidos continuamente, en iteraciones muy cortas* Enfoque como un producto completo y único, si bien gracias a la modularidad podemos dividir un problema en partes más sencillas y repartir las tareas entre varios equipos, los elementos de Scrum se deben entender como algo único.  Al final y al cabo vamos a tener solamente un único producto potencialmente entregable, representando un único incremento, en un único sprint, independientemente de si hay 1 o 21 equipos Scrum. “Los clientes esperan un producto, no una parte.”* Poner al cliente en el centro de todo, esto trata de identificar qué aporta valor y que supone un desperdicio para el cliente.* Mejora continua mediante a la excelencia técnica¸ se busca entregar productos de calidad continuamente minimizando los defectos.* Teoría de colas: Debemos entender cómo se comportan los sistemas con la teoría de colas en el dominio del desarrollo software para poder administrarlas controlando los límites de trabajo en curso, la multitarea y los productos de trabajo.¿Cómo funciona LeSS?Se basa en multiequipos Scrum (varios equipos Scrum), donde hay un único Product Owner que nos da la visión del producto, encargado de priorizar el Product Backlog del cliente, para obtener el mayor valor de negocio posible. Se busca obtener un producto potencialmente entregable en periodos (Sprints) de 1 a 4 semanas.Ahora tenemos varios equipos Scrum, desarrollando este producto en un Sprint compartido al mismo tiempo.El ciclo de vida es iterativo e incremental. Donde cada Sprint comienza con el Sprint Planning 1, que es una pequeña reunión en la que cada equipo selecciona las historias de usuario que aportan más valor (Se encuentran la parte superior del Product Backlog priorizadas por el Product Owner) para implementarlas en el Sprint.Después sigue el Sprint Planning 2, que es el evento en el que los equipos discuten y deciden las estrategias para desarrollar esas historias de usuario que han seleccionado anteriormente.Durante el Sprint, cada equipo se autoorganiza para desarrollar la funcionalidad que seleccionaron en Sprint Planning 1, al mismo tiempo que colaboran continuamente con los otros equipos para entregar el incremento de un único producto (tiene que estar integrado).Como los equipos son autoorganizados, ellos mismos son los responsables de coordinarse con otros equipos, es decir no existen coordinadores asignados. (comunicación dailys).A medida que el Sprint avanza, más o menos a la mitad de la iteración, los equipos hacen una breve pausa del Sprint en curso, para refinar el Product Backlog, es decir, tendrán que colaborar con el cliente y los usuarios finales para esclarecer el trabajo de futuros Sprints. Gracias a conectar a los equipos con los clientes, podemos liberar al Product Owner para que trabaje sobre la visión y priorizaciónLuego tenemos un Sprint Review, una reunión compartida donde los equipos y clientes evalúan qué trabajo ha sido terminado y cuál será el mejor incremento para la siguiente iteración (deciden qué parte del desarrollo aporta más valor para la próxima iteración).Cada equipo hace una retrospectiva para inspeccionar y adaptar la forma en la que trabajan, es decir, queremos que las personas posean el proceso y los métodos, no que sean esclavos de ellos. Aceptar esto, es lo que nos va a permitir obtener una mejora continua.LeSS va más allá de la “retrospectiva en equipo”, los equipos, el product owner, los scrum masters y los gerentes usan algo denominado retrospectiva general para explorar los obstáculos sistémicos (que afectan a todo el sistema) y organizacionales que impiden mejorar la entrega continua de valor. Es decir, todos estos roles mencionados, utilizan LeSS para inspeccionar y adaptar a la organización entera.Cuando tenemos más de 8 equipos, hacemos algo similar llamado LeSS Huge, que sigue teniendo como objetivo obtener un producto entregable en cada Sprint. Conceptualmente, LeSS se amplía aún más al tener varios marcos LeSS (más pequeños) apilados uno encima del otro.3.3 Scrum of Scrums (SoS)Scrum impone una limitación a los proyectos, y esta es el tamaño de los equipos. La máxima cantidad de miembros es 9. Existen muy buenas razones, como la eficiencia, la autoorganización o el crecimiento exponencial de la red de comunicaciones. Si un producto requiere más desarrolladores, en lugar de aumentar un equipo existente, podemos crear varios y distribuir el trabajo entre ellos. Para ello, necesitamos una estrategia de coordinación, alineamiento, comunicación e integración del incremento al final de cada iteración.¿Cómo acometer entonces un proyecto de gran tamaño? ¿De qué manera puede crecer el uso de metodologías ágiles en una organización? La respuesta requiere un enfoque no incluido en el marco de trabajo, que es Scrum ofScrums, o SoS. Es posible definirlo como una técnica para usar Scrum de forma escalable, cuando varios equipos trabajan en un producto único o una familia de productos homogénea.Jeff Sutherland menciona SoS como un complemento que no es parte del marco original, por lo que no aparece en la Guía oficial. La situación que originó este enfoque fue la necesidad de coordinar y sincronizar varias unidades de negocio individuales, con múltiples líneas de productos. Las conclusiones fueron publicadas en 2001 en el artículo “La metodología ágil se puede escalar: invención y reinvención de scrum en cinco empresas “, en el que menciona por primera vez el concepto.Scrum of Scrums nos da la solución a esta problemática. Con un formato similar a la daily meeting, en la que, en vez de los miembros, son los equipos los que se sincronizan. Los participantes son embajadores de cada uno de ellos. Cada integrante comenta de manera breve y concisa:* ¿Qué actividades ha ejecutado tu equipo desde la última reunión? * ¿Qué actividades realizará antes de la próxima reunión?* ¿Existen bloqueos o impedimentos? * ¿Existe alguna actividad a ejecutar próximamente por tu equipo que interfiera o afecte el trabajo del resto? La última pregunta es la que coordina y alinea, trata las dependencias y bloqueos que el trabajo de un equipo podría generar en el resto. Para reducir esto es fundamental crear las historias de usuario lo más independientes posible.La intención es que la exposición de cada integrante sea breve y concisa. Los problemas se pueden mencionar, pero no se buscan soluciones hasta que todos hayan hecho su intervención.Scrum of Scrums se puede celebrar de forma diaria, en días alternos o semanalmente. Por lo general, se realiza luego que los equipos celebran sus reuniones diarias en paralelo. A las sucesivas reuniones pueden entonces acudir diferentes miembros cada vez. Es posible rotar según la etapa del proyecto y quien esté en mejor posición para contribuir con la reunión. Es necesario que los participantes tengan poder de decisión y que los compromisos adquiridos sean en nombre del equipo.La reunión está facilitada por un Scrum Master, pero los equipos no pueden estar representados por su Scrum Master o su dueño de producto. El facilitador no tiene responsabilidad directiva. El grupo SoS no realiza planificaciones de iteración ni revisiones de Backlogs. La intención es simple y sencilla: coordinar y sincronizar actividades. El equipo de representantes generará un Backlog de Scrum de Scrums, que consiste en una lista de incidencias o problemas comunes. Es conveniente que los elementos que no puedan ser resueltos de inmediato, se asignen a un kanban impedimentos y se designe un responsable.Inmediatamente después, en una reunión separada, se resolverán los problemas identificados. Es recomendable reservar 30 minutos para esta tarea.Recordemos que el marco subyacente sigue siendo Scrum. Hablamos siempre de equipos cross funcionales y autosuficientes. Una disfunción habitual es intentar dividir un gran equipo de trabajo ya en marcha en subunidades ágiles, donde cada una de ellas está especializada por función. Tendríamos por ejemplo la unidad de UX, la de los analistas, la de front end, la de back end, la de servicios, etcétera. Esto no es agile ni tampoco Scrum.Otro inconveniente que puede surgir es que, al dividir un producto de gran tamaño, la cantidad de equipos sea muy alta, y en el SoS deban participar más de 10 miembros. En esta situación, es posible aplicar un enfoque fractal, y tener una primera etapa de coordinación de 3 o 4 unidades, y luego un representante de estos acudir a un nivel superior.4.    Ejercicios / Cuestionario> Describa escuetamente los roles, artefactos y eventos contemplados dentro de Scrum técnico.* Roles:o Scrum Master: Responsable de establecer Scrum tal como se define en la Guía de Scrum.o Product owner: Responsable de maximizar el valor del producto resultante del trabajo del equipo de Scrum.o Equipo Scrum: Son los desarrolladores, personas que se comprometen a crear cualquier aspecto de un Incremento útil (funcional) en cada Sprint.* Artefactos: Sirven para el desarrollo y la gestión del proyecto bajo la metodología Scrum. Son tres los artefactos presentes:o Product backlog: El trabajo pendiente del producto es una lista emergente y ordenada de lo que se necesita para mejorar el producto. Es la única fuente de trabajo emprendida por el equipo Scrum. o Sprint backlog: El Trabajo pendiente de Sprint se compone del objetivo sprint (por qué), el conjunto de elementos de trabajo pendiente de producto seleccionados para el Sprint (qué), así como un plan accionable para entregar el incremento (cómo). o Incremento: Es la parte del producto que se consigue en un sprint. Cada Incremento es aditivo a todos los Incrementos anteriores y verificado a fondo, asegurando que todos los Incrementos funcionen juntos. Para proporcionar el valor, el incremento debe ser utilizable.* Eventos:o Sprint: Donde las ideas se convierten en valor. Son eventos de longitud fija de un mes o menos para crear consistenciao Reunión de planificación del sprint: Inicia el Sprint estableciendo el trabajo que se realizará para el mismo. Este plan resultante es creado por el trabajo colaborativo de todo el equipo de Scrum.o Reunión diaria: Inspeccionar el progreso hacia el Objetivo Sprint y adaptar el Sprint Backlog según sea necesario, ajustando el próximo trabajo planeado.o Reunión de revisión del sprint: Inspeccionar el resultado del Sprint y determinar futuras adaptaciones. El equipo de Scrum presenta los resultados de su trabajo a las partes interesadas clave y se discute el progreso hacia el Objetivo de Producto.o Reunión de retrospectiva: Planificar formas de aumentar la calidad y la eficacia.> Describa cuales son, quién participa y en qué consisten los distintos tipos de reuniones que contempla Scrum.* Sprint Planning: Participan el PO, SM y DT  - PO: expone el valor a conseguir para su producto al finalizar el Sprint.  - SM: Facilita la reunión entre PO y ST 				- DT: Selecciona los elementos del Product Backlog a entregar. Es el único con capacidad para evaluar lo que se puede lograr durante el Sprint* Daily Scrum: Participa el DT y SM        - DT: Se inspecciona el trabajo avanzado y si se han detectado obstáculos o impedimentos desde el último Scrum Diario, y se hace una previsión del trabajo que podría completarse antes del siguiente Scrum Diario.        - SM: Asegurarse que se realiza la reunión y tomar nota. - PO: Excepcionalmente puede acudir de forma pasiva* Sprint Review: Participan el DT, SM, PO y los interesados invitados por el PO (stackholders)                               	- DT: Explica como fue el Sprint, el incremento realizado y en caso de encontrar problemas, como se resolvieron.  - SM: Determina que personas asistirán       - PO: Recoge las impresiones, opiniones y respuestas de los stackholders y actualiza el product Backlog para el siguiente sprint* Sprint Retrospective: DT, SM Reunión justo después del Sprint Review y antes de la Planificación del siguiente. - DT: Analizan lo que ha sido el proceso e identifican y evalúan problemas concretos, así como lo que se puede mejorar para implementarlo en el próximo Sprint.  - SM: Toma nota de las respuestas del ST y ayudará en las mejores indicadas por el ST. > Explique cómo se corresponde SCRUM con el modelo de calidad “Plan, Do, Check, Act”. El Plan es la reunión de planificación del sprintHacer es la ejecución del sprint (junto con Daily Scrum) Check es la revisión del sprint y la retrospectiva Act es el resultado de la retroalimentación de la revisión del sprint y la retrospectiva, que se refleja en los requisitos específicos y las actividades de mejora del proceso. Cada ciclo de PDCA es como un Sprint> Diferencias entre Scrum y Kanban 5.   Bibliografía    https://www.preparatic.org/     Temario del Colegio Oficial de Ingeniería Informática de la Comunitat Valenciana.    https://agilealliance.org    https://scrum.org    https://scrumguides.org    https://less.workshttps://viewnext.usal.es/blog/introducci%C3%B3n-lesshttps://www.scaledagileframework.comhttps://www.viewnext.com/safe-scaled-agile-framework/https://agileexperience.es/2021/02/12/escalado-basico-scrum-de-scrums/https://scrum.menzinsky.com/2017/12/como-funciona-scrum-de-scrums.html